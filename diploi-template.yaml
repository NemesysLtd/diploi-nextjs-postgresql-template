diploiTemplateVersion: V1.0
name: diploi-nextjs-postgresql
description: A template for running NextJS together with PostgreSQL
defaultName: Todo App

stages:
  - name: Production
    identifier: production
  - name: Staging
    identifier: staging
  - name: Development
    identifier: development

contexts:
  - name: app
    identifier: app
  - name: postgres
    identifier: postgres

parameterGroups:
  - name: PostgreSQL Database
    identifier: postgres
    toggleable: true
    description: Database connection info
    defaultValue: TRUE
    parameters:
      - name: Host
        identifier: POSTGRES_HOST
        defaultValue: postgres
        type: string
      - name: Port
        identifier: POSTGRES_PORT
        defaultValue: 5432
        type: integer
      - name: User
        identifier: POSTGRES_USER
        defaultValue: postgres
        type: string
        contexts: label=postgres,label=app
      - name: Password
        identifier: POSTGRES_PASSWORD
        defaultValue: postgres
        type: secret
      - name: Schema
        identifier: POSTGRES_DB
        defaultValue: todo
        type: string
  - name: Server
    identifier: SERVER
    parameters:
      - name: Server count
        identifier: SERVER_REPLICAS
        defaultValue: 2
        type: integer
        stages:
          - production

environmentVariables:
  - identifier: PROJECT_TITLE
    defaultValue: My Todo App
    type: string
    contexts: label=app

repositories:
  - name: web
    identifier: web

hosts:
  - name: App
    identifier: app
    urlFormat: '[label].[default-domain]'

ssh:
  - usernameFormat: '[label]'
    contexts: label=app
    stages:
      - development
  - usernameFormat: '[label]-[index]'
    contexts: label=app
    stages:
      - production
  - usernameFormat: '[label]-postgres'
    contexts: label=postgres

logs:
  - identifier: www-log
    name: Next.js Log
    labelSelector: app=app
    command: tail -n 2000 -F /var/log/www.log

actions:
  - identifier: nextjs-restart
    name: Restart Next.js
    labelSelector: app=app
    command: cd www && npm run restart

images:
  - identifier: app
    repository: web
    dockerfile: Dockerfile
    buildStages:
      - production
      - staging
    stages:
      - development
      - production
      - staging

storage:
  - identifier: app
    stages:
      - development
    sizeMb: 8000
  - identifier: postgres
    stages:
      - production
      - staging
      - development
    sizeMb: 10000

status:
  url: http://app:3000/status
